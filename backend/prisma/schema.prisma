generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model endereco {
  id_endereco Int       @id @default(autoincrement())
  cep         String    @db.VarChar(8)
  rua         String    @db.VarChar(100)
  numero      String    @db.VarChar(6)
  bairro      String    @db.VarChar(50)
  cidade      String    @db.VarChar(50)
  estado      String    @db.VarChar(2)
  usuario     usuario[]
}

model usuario {
  id_usuario      Int       @id @default(autoincrement())
  nome            String    @db.VarChar(50)
  cpf             String    @db.VarChar(11)
  email           String    @db.VarChar(50)
  senha           String    @db.VarChar(255)
  nivel           String?   @db.VarChar(15)
  ativo           Boolean
  data_nascimento String?   @db.VarChar(10)
  fk_id_endereco  Int?
  endereco        endereco? @relation(fields: [fk_id_endereco], references: [id_endereco], onDelete: NoAction, onUpdate: NoAction)
  have            have[]
}

model professor {
  id_professor Int     @id @default(autoincrement())
  nome         String? @db.VarChar(50)
  modalidade   String? @db.VarChar(50)
  cpf          String? @unique @db.VarChar(11)
  aula         aula[]
}

model aula {
  id_aula         Int       @id @default(autoincrement())
  nome            String    @db.VarChar(40)
  data            String    @db.VarChar(16)
  fk_id_professor Int
  vagas           Int?
  professor       professor @relation(fields: [fk_id_professor], references: [id_professor], onDelete: NoAction, onUpdate: NoAction)
  have            have[]
}

model have {
  id_usuario Int
  id_aula    Int
  aula       aula    @relation(fields: [id_aula], references: [id_aula], onDelete: NoAction, onUpdate: NoAction)
  usuario    usuario @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)

  @@id([id_usuario, id_aula])
}
